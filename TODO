1.update proto definiton: put key to vlog
2.optimize write db and write vlog
3.implement vlog compact (DONE)
4.write more vlog files 
5.compatible with rocksdb interfaces
6.implement delete key (DONE)
7.add batch api
8.add interface to manage vlog entries
9.protobuf is really buggy, drop it (DONE)
10.implement range query
11.replace fopen/fwrite with open/write (DONE)
12.free resources is not handled (DONE)
13.write vlog first, then write to rocksdb
14.write db checkpoint/recovery 
15.it seems better to make vlogs sorted.
16.for batch writes, how can we determine the offset to the vlogfile? if single writer, this's not a problem.
17.create threads for read/write.
18.reduce memory copy
19.direct IO allign
20.deal with updated keys: we write to a different position in vlog when 
   updating, bu we cann't reclaim the space according to current implemetion,
   because the key still exists. maybe we should write whether the vlog item
   should be reclaimed on vlog ondisk struct.
21.deal with a batch with Get(a writebatch would never have a read operation, so this's not a problem)
22.handle read/write errors, like EINTR (DONE)
23.change Vlog_query interface, abandon current std out version
24.background thread compaction: when do we conduct a compaction?
25.make it a daemon, processing put/get requests
26.control the size of each write batch
27.how to record compaction status
28.should we skip if the vlog file is full? we rely on the offset 0 to be a good header.
   so we cannot write remaining data to the header of a new vlog file.
29.fix too many open files problem
30.use shared_ptr to avoid resource leak
31.implement vlog readahead
32.it's ridiculous to composite DBWrapper into VlogFileManager (DONE)
33.replace timestamp with sequence number
34.optimize encode/decode, stole from rocksdb
35.when to trigger compaction?
36.VlogFileManger should know all the vlog files
37.we should record whether a vlog is writable?
38.disable rocksdb WAL for performance, add WiscKeydb recovery(WON'T FIX):
   it's impossible to recover if WAL is totally disabled, the author of original paper claimed that it's possible
   to record the head offset in lsm with kv pair <"head", head-vlog-offset>, and use it for recovery,
   while the head-vlog-offset means all (key, vlog-locator) pairs all have been wrote to lsm, however, without WAL, 
   we actually have no idea whether the (key, vlog-locator) are persistted, if we set hook to memtable flush,
   it's hard for us to know the biggest offset (aka vlog-offset we want to know), because it's only the keys are
   sorted, and we want a sortted biggest value. It's really efficient and complicated to disable WAL for perforamnce.

39.support snapshot
40.check validity of input offset/length according to current vlog offset 
41.is it possible a key is exist in lsm, but not in vlog? now we think it impossible.
42.suppport async inserts, we now always use sync ones, write vlog syncly, and then write lsm
44.posix_fadvise() when point query and range query
45.fix to many open files
46.use vlog thread and db thread to process requests
