// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newdb.offset.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "newdb.offset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace newdb {

namespace {

const ::google::protobuf::Descriptor* dboffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dboffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* vlogkeyvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vlogkeyvalue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_newdb_2eoffset_2eproto() {
  protobuf_AddDesc_newdb_2eoffset_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "newdb.offset.proto");
  GOOGLE_CHECK(file != NULL);
  dboffset_descriptor_ = file->message_type(0);
  static const int dboffset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dboffset, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dboffset, offset_),
  };
  dboffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dboffset_descriptor_,
      dboffset::default_instance_,
      dboffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dboffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dboffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dboffset));
  vlogkeyvalue_descriptor_ = file->message_type(1);
  static const int vlogkeyvalue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vlogkeyvalue, keysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vlogkeyvalue, valuesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vlogkeyvalue, keystring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vlogkeyvalue, valuestring_),
  };
  vlogkeyvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vlogkeyvalue_descriptor_,
      vlogkeyvalue::default_instance_,
      vlogkeyvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vlogkeyvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vlogkeyvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vlogkeyvalue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_newdb_2eoffset_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dboffset_descriptor_, &dboffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vlogkeyvalue_descriptor_, &vlogkeyvalue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_newdb_2eoffset_2eproto() {
  delete dboffset::default_instance_;
  delete dboffset_reflection_;
  delete vlogkeyvalue::default_instance_;
  delete vlogkeyvalue_reflection_;
}

void protobuf_AddDesc_newdb_2eoffset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022newdb.offset.proto\022\005newdb\"*\n\010dboffset\022"
    "\016\n\006length\030\001 \002(\003\022\016\n\006offset\030\002 \002(\003\"Z\n\014vlogk"
    "eyvalue\022\017\n\007keysize\030\001 \002(\006\022\021\n\tvaluesize\030\002 "
    "\002(\006\022\021\n\tkeystring\030\003 \002(\t\022\023\n\013valuestring\030\004 "
    "\002(\t", 163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "newdb.offset.proto", &protobuf_RegisterTypes);
  dboffset::default_instance_ = new dboffset();
  vlogkeyvalue::default_instance_ = new vlogkeyvalue();
  dboffset::default_instance_->InitAsDefaultInstance();
  vlogkeyvalue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_newdb_2eoffset_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_newdb_2eoffset_2eproto {
  StaticDescriptorInitializer_newdb_2eoffset_2eproto() {
    protobuf_AddDesc_newdb_2eoffset_2eproto();
  }
} static_descriptor_initializer_newdb_2eoffset_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dboffset::kLengthFieldNumber;
const int dboffset::kOffsetFieldNumber;
#endif  // !_MSC_VER

dboffset::dboffset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dboffset::InitAsDefaultInstance() {
}

dboffset::dboffset(const dboffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dboffset::SharedCtor() {
  _cached_size_ = 0;
  length_ = GOOGLE_LONGLONG(0);
  offset_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dboffset::~dboffset() {
  SharedDtor();
}

void dboffset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dboffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dboffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dboffset_descriptor_;
}

const dboffset& dboffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newdb_2eoffset_2eproto();
  return *default_instance_;
}

dboffset* dboffset::default_instance_ = NULL;

dboffset* dboffset::New() const {
  return new dboffset;
}

void dboffset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = GOOGLE_LONGLONG(0);
    offset_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dboffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int64 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dboffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->length(), output);
  }

  // required int64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dboffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->length(), target);
  }

  // required int64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dboffset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->length());
    }

    // required int64 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dboffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dboffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dboffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dboffset::MergeFrom(const dboffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dboffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dboffset::CopyFrom(const dboffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dboffset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void dboffset::Swap(dboffset* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dboffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dboffset_descriptor_;
  metadata.reflection = dboffset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vlogkeyvalue::kKeysizeFieldNumber;
const int vlogkeyvalue::kValuesizeFieldNumber;
const int vlogkeyvalue::kKeystringFieldNumber;
const int vlogkeyvalue::kValuestringFieldNumber;
#endif  // !_MSC_VER

vlogkeyvalue::vlogkeyvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vlogkeyvalue::InitAsDefaultInstance() {
}

vlogkeyvalue::vlogkeyvalue(const vlogkeyvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vlogkeyvalue::SharedCtor() {
  _cached_size_ = 0;
  keysize_ = GOOGLE_ULONGLONG(0);
  valuesize_ = GOOGLE_ULONGLONG(0);
  keystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  valuestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vlogkeyvalue::~vlogkeyvalue() {
  SharedDtor();
}

void vlogkeyvalue::SharedDtor() {
  if (keystring_ != &::google::protobuf::internal::kEmptyString) {
    delete keystring_;
  }
  if (valuestring_ != &::google::protobuf::internal::kEmptyString) {
    delete valuestring_;
  }
  if (this != default_instance_) {
  }
}

void vlogkeyvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vlogkeyvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vlogkeyvalue_descriptor_;
}

const vlogkeyvalue& vlogkeyvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newdb_2eoffset_2eproto();
  return *default_instance_;
}

vlogkeyvalue* vlogkeyvalue::default_instance_ = NULL;

vlogkeyvalue* vlogkeyvalue::New() const {
  return new vlogkeyvalue;
}

void vlogkeyvalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    keysize_ = GOOGLE_ULONGLONG(0);
    valuesize_ = GOOGLE_ULONGLONG(0);
    if (has_keystring()) {
      if (keystring_ != &::google::protobuf::internal::kEmptyString) {
        keystring_->clear();
      }
    }
    if (has_valuestring()) {
      if (valuestring_ != &::google::protobuf::internal::kEmptyString) {
        valuestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vlogkeyvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 keysize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &keysize_)));
          set_has_keysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_valuesize;
        break;
      }

      // required fixed64 valuesize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_valuesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &valuesize_)));
          set_has_valuesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keystring;
        break;
      }

      // required string keystring = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keystring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keystring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keystring().data(), this->keystring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_valuestring;
        break;
      }

      // required string valuestring = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_valuestring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valuestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->valuestring().data(), this->valuestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vlogkeyvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 keysize = 1;
  if (has_keysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->keysize(), output);
  }

  // required fixed64 valuesize = 2;
  if (has_valuesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->valuesize(), output);
  }

  // required string keystring = 3;
  if (has_keystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keystring().data(), this->keystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keystring(), output);
  }

  // required string valuestring = 4;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->valuestring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vlogkeyvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 keysize = 1;
  if (has_keysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->keysize(), target);
  }

  // required fixed64 valuesize = 2;
  if (has_valuesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->valuesize(), target);
  }

  // required string keystring = 3;
  if (has_keystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keystring().data(), this->keystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keystring(), target);
  }

  // required string valuestring = 4;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->valuestring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vlogkeyvalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 keysize = 1;
    if (has_keysize()) {
      total_size += 1 + 8;
    }

    // required fixed64 valuesize = 2;
    if (has_valuesize()) {
      total_size += 1 + 8;
    }

    // required string keystring = 3;
    if (has_keystring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keystring());
    }

    // required string valuestring = 4;
    if (has_valuestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valuestring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vlogkeyvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vlogkeyvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vlogkeyvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vlogkeyvalue::MergeFrom(const vlogkeyvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keysize()) {
      set_keysize(from.keysize());
    }
    if (from.has_valuesize()) {
      set_valuesize(from.valuesize());
    }
    if (from.has_keystring()) {
      set_keystring(from.keystring());
    }
    if (from.has_valuestring()) {
      set_valuestring(from.valuestring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vlogkeyvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vlogkeyvalue::CopyFrom(const vlogkeyvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vlogkeyvalue::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void vlogkeyvalue::Swap(vlogkeyvalue* other) {
  if (other != this) {
    std::swap(keysize_, other->keysize_);
    std::swap(valuesize_, other->valuesize_);
    std::swap(keystring_, other->keystring_);
    std::swap(valuestring_, other->valuestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vlogkeyvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vlogkeyvalue_descriptor_;
  metadata.reflection = vlogkeyvalue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace newdb

// @@protoc_insertion_point(global_scope)
